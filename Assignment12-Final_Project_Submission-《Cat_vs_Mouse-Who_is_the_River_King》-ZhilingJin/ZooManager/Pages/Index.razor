@page "/"
@using ZooManager
@implements IDisposable

<style>
    /* Styling for the game board cells */
    .game-cell {
        width: 100px;
        height: 100px;
        font-size: 40px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        border: 1px solid #ddd;
        position: relative;
        padding: 5px;
    }

    /* Styling for animal details displayed on cells */
    .animal-details {
        font-size: 10px;
        position: absolute;
        bottom: 2px;
        right: 2px;
    }

    /* Styling for buttons */
    button {
        width: 75px;
        height: 75px;
        font-size: 50px;
    }

        /* Small buttons */
        button.sm {
            display: inline-flex;
            width: 50px;
            height: 50px;
            justify-content: center;
            align-items: center;
            font-size: 30px;
        }

    /* River cell styling */
    .river {
        background-color: lightblue;
    }

    /* Player areas */
    .cat-area {
        background-color: rgba(255, 107, 107, 0.1); /* Very light red */
    }

    .mouse-area {
        background-color: rgba(78, 205, 196, 0.1); /* Very light teal */
    }

    /* Occupied cell styling */
    .cat-occupied {
        background-color: rgba(255, 107, 107, 0.3); /* Darker red */
    }

    .mouse-occupied {
        background-color: rgba(78, 205, 196, 0.3); /* Darker teal */
    }

    /* Player info styling */
    .player-info {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    /* Animal info styling */
    .animal-info {
        font-size: 10px;
        text-align: center;
        position: absolute;
        bottom: 2px;
        left: 0;
        right: 0;
    }

    /* Styling for selected cells */
    .selected {
        border: 2px solid yellow;
    }

    /* Valid move highlighting */
    .valid-move {
        background-color: rgba(255, 255, 0, 0.3);
    }

    /* Faction-specific styling */
    .cat-faction {
        color: #FF6B6B;
        text-shadow: 1px 1px 2px #000000;
    }

    .mouse-faction {
        color: #4ECDC4;
        text-shadow: 1px 1px 2px #000000;
    }

    /* Special target styling */
    .squirrel-target {
        box-shadow: 0 0 10px 3px yellow; /* Yellow shadow effect */
    }

    .selected-target {
        border: 3px solid red; /* Red border */
    }
</style>

<div class="container">
    <div class="row align-items-center mb-3">
        <div class="col">
            <h1 class="d-inline-block mr-3">Cat vs Mouse - Who is the River King?</h1>
            <button class="btn btn-info" @onclick="OpenRulesModal">Game Rules</button>
        </div>
    </div>

    @if (Game.CurrentPhase == Game.GamePhase.Setup)
    {
        <!-- Board size selection phase -->
        <div class="row">
            <div class="col">
                <h2>Please select the board size:</h2>
                <button class="btn btn-primary" @onclick="() => SetBoardSize(5)">5x5</button>
                <button class="btn btn-primary" @onclick="() => SetBoardSize(7)">7x7</button>
            </div>
        </div>
    }
    else if (Game.CurrentPhase == Game.GamePhase.Placement)
    {
        <!-- Piece placement phase -->
        <div class="row mb-3">
            <div class="col">
                <h3>Player @Game.CurrentPlayer.Id placing pieces</h3>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="useAIPlacement" id="useAIPlacement">
                    <label class="form-check-label" for="useAIPlacement">
                        Use AI random placement
                    </label>
                </div>
                @if (useAIPlacement)
                {
                    <button class="btn btn-primary" @onclick="AIPlaceAnimals">AI Random Placement</button>
                }
                else
                {
                    <p>Please select the type of piece to place:</p>
                    @foreach (var animalType in Game.GetAvailableAnimalTypes(Game.CurrentPlayer))
                    {
                        <button class="btn btn-primary m-1" @onclick="() => SelectAnimalType(animalType)">
                            @animalType
                        </button>
                    }
                }

            </div>
        </div>

        <!-- Board rendering during placement phase -->
        <div class="row">
            <div class="col">
                <table align="center">
                    @for (var y = 0; y < Game.numCellsY; y++)
                    {
                        <tr>
                            @for (var x = 0; x < Game.numCellsX; x++)
                            {
                                var zone = Game.animalZones[y][x];
                                var location = new Point { x = x, y = y };
                                <td>
                                    <div @onclick="() => PlaceSelectedAnimal(location)" class="game-cell @(zone.isRiver ? "river" : "") @(IsValidPlacementLocation(location) ? "valid-placement" : "")">
                                        @if (zone.occupant != null)
                                        {
                                            <span>@zone.occupant.emoji</span>
                                            @if (zone.occupant is Animal animal)
                                            {
                                                <div class="animal-info">
                                                    HP:@animal.healthPoints/ATK:@animal.attackPower
                                                </div>
                                            }
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
    else if (Game.CurrentPhase == Game.GamePhase.Playing || Game.CurrentPhase == Game.GamePhase.SquirrelAbility)
    {
        <!-- Player information area during the game -->
        <div class="row">
            @foreach (var player in new[] { Game.Player1, Game.Player2 })
            {
                <div class="col-6 player-info">
                    <h2>Player @player.Id</h2>
                    <p>King status: @(player.King != null ? "Alive" : "Defeated")</p>
                    <p>Remaining pieces: @player.Pieces.Count</p>
                    <p>Animal types: @string.Join(", ", player.AssignedAnimalTypes)</p>
                </div>
            }
        </div>

        <!-- Current player and turn information -->
        <div class="row">
            <div class="col">
                <h3>Current turn: Player @Game.CurrentPlayer.Id</h3>
                @if (Game.CurrentPhase == Game.GamePhase.SquirrelAbility)
                {
                    <p>Squirrel is using its special ability, please select two targets</p>
                }
            </div>
        </div>

        <!-- Game board during the playing phase -->
        <div class="row">
            <div class="col-md-9">
                <table align="center">
                    @for (var y = 0; y < Game.numCellsY; y++)
                    {
                        <tr>
                            @for (var x = 0; x < Game.numCellsX; x++)
                            {
                                var zone = Game.animalZones[y][x];
                                var location = new Point { x = x, y = y };
                                var areaClass = x < Game.riverColumn ? "cat-area" :
                                                (x > Game.riverColumn ? "mouse-area" : "");
                                var occupiedClass = "";
                                if (zone.occupant is Animal occupyingAnimal)
                                {
                                    occupiedClass = occupyingAnimal.CurrentFaction == Animal.Faction.Cat ? "cat-occupied" : "mouse-occupied";
                                }
                                <td>
                                    <div @onclick="() => HandleZoneClick(zone)"
                                         class="game-cell @areaClass @occupiedClass @(zone.isRiver ? "river" : "") @(IsSelected(zone) ? "selected" : "") @(IsValidMove(zone, location) ? "valid-move" : "") @GetCellClass(zone)">
                                        @if (zone.occupant != null)
                                        {
                                            var factionClass = zone.occupant is Animal a
                                                ? (a.CurrentFaction == Animal.Faction.Cat ? "cat-faction" : "mouse-faction")
                                                : "";
                                            <span class="@factionClass @GetAnimalClass(zone.occupant)">
                                                @zone.occupant.emoji
                                            </span>
                                            @if (zone.occupant is Animal displayAnimal)
                                            {
                                                <div class="animal-info">
                                                    HP:@displayAnimal.healthPoints/ATK:@displayAnimal.attackPower
                                                    @{
                                                        var effectDescription = displayAnimal.GetEffectDescription();
                                                        if (!string.IsNullOrEmpty(effectDescription))
                                                        {
                                                            <br />
                                                            <span>Effects: @effectDescription</span>
                                                        }
                                                    }
                                                </div>
                                            }
                                        }
                                    </div>
                                </td>
                            }


                        </tr>
                    }
                </table>
            </div>

            <!-- Special ability and skip turn buttons -->
            <div class="col-md-3 d-flex align-items-center">
                @if (Game.CurrentPhase == Game.GamePhase.SquirrelAbility)
                {
                    <p>Selected targets: @Game.squirrelTargets.Count / 2</p>
                    <button class="btn btn-primary mb-2" @onclick="ConfirmSquirrelAbility" disabled="@(Game.squirrelTargets.Count != 2)">
                        Confirm Squirrel Ability
                    </button>
                }
                else if (Game.GetSelectedAnimal() != null)
                {
                    <button class="btn btn-primary mb-2" @onclick="UseSpecialAbility" disabled="@(!CanUseSpecialAbility(Game.GetSelectedAnimal()))">
                        Use Special Ability
                    </button>
                }
                <button class="btn btn-secondary" @onclick="Game.SkipTurn" disabled="@(Game.CurrentPhase == Game.GamePhase.SquirrelAbility)">
                    Skip Turn
                </button>
            </div>
        </div>
    }
    else if (Game.CurrentPhase == Game.GamePhase.GameOver)
    {
        <!-- Game over phase -->
        <div class="row">
            <div class="col">
                <h2>Game Over</h2>
                <p>Winner: Player @(Game.CurrentPlayer == Game.Player1 ? Game.Player2.Id : Game.Player1.Id)</p>
                <button class="btn btn-primary" @onclick="RestartGame">Restart Game</button>
            </div>
        </div>
    }

    <!-- Game rules modal -->
    <div class="modal @(showRulesModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Zoo Manager Game Rules</h5>
                    <button type="button" class="close" @onclick="CloseRulesModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                    <h3>Game Setup</h3>
                    <ul>
                        <li>2 players</li>
                        <li>Board: 5x5 or 7x7 grid with a river in the middle column</li>
                        <li>Victory condition: Defeat the opponent's king piece or eliminate all opponent's pieces.</li>
                        <li>Turn-based: Players take turns moving one piece or passing</li>
                    </ul>

                    <h3>Piece Types and Attributes</h3>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Piece</th>
                                <th>Attack</th>
                                <th>Health</th>
                                <th>Special Ability</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Leopard (🐆)</td>
                                <td>4</td>
                                <td>3</td>
                                <td>Can cross the river freely</td>
                            </tr>
                            <tr>
                                <td>Tiger (🐅)</td>
                                <td>4</td>
                                <td>4</td>
                                <td>Roar: Deals damage equal to its weight to the king</td>
                            </tr>
                            <tr>
                                <td>Mouse (🐁)</td>
                                <td>5</td>
                                <td>1</td>
                                <td>Survival(Passive Skill): Maximum damage received is 0</td>
                            </tr>
                            <tr>
                                <td>Squirrel (🐿️)</td>
                                <td>2</td>
                                <td>5</td>
                                <td>Throw: Can damage 2 enemy pieces simultaneously</td>
                            </tr>
                            <tr>
                                <td>Cat King (🐱)</td>
                                <td>0</td>
                                <td>50</td>
                                <td>Rally: Move a friendly piece and heal the king 5 HP</td>
                            </tr>
                            <tr>
                                <td>Mouse King (🐭)</td>
                                <td>0</td>
                                <td>50</td>
                                <td>Revive: Resurrect a random defeated friendly piece with 1 HP</td>
                            </tr>
                        </tbody>
                    </table>

                    <h3>Interaction Effects</h3>
                    <ul>
                        <li><strong>Attract:</strong> Increases target's movement by 1 for the next turn</li>
                        <li><strong>Repel:</strong> Decreases target's movement by 1 for the next turn</li>
                        <li><strong>Pursue:</strong> Allows double damage this turn</li>
                        <li><strong>Flee:</strong> Moves 0-1 spaces away</li>
                        <li><strong>Intimidate:</strong> 50% chance to paralyze the target</li>
                        <li><strong>Paralyze:</strong> Target can't attack and has -1 movement next turn</li>
                    </ul>

                    <h3>River Rules</h3>
                    <p>The river is a crucial element in Zoo Manager, affecting gameplay and strategy:</p>
                    <ul>
                        <li><strong>Location:</strong> The river occupies the middle column of the game board (3rd column in 5x5, 4th column in 7x7).</li>
                        <li><strong>Piece Placement:</strong> No pieces can be placed on or stay in the river during any phase of the game.</li>
                        <li>
                            <strong>Movement Restriction:</strong>
                            <ul>
                                <li>Most pieces cannot cross the river in a single move.</li>
                                <li>Crossing the river ends a piece's turn immediately; it cannot move further or attack after crossing.</li>
                            </ul>
                        </li>
                        <li>
                            <strong>Special Abilities:</strong>
                            <ul>
                                <li>The Leopard (🐆) has a unique ability to cross the river freely once per game.</li>
                                <li>Other pieces must find alternative routes or use special abilities to interact across the river.</li>
                            </ul>
                        </li>
                        <li><strong>Interaction Effects:</strong> The river blocks interaction effects. Pieces on opposite sides of the river do not trigger effects on each other.</li>
                        <li>
                            <strong>Strategic Impact:</strong>
                            <ul>
                                <li>The river divides the board into two territories, creating a natural defensive line.</li>
                                <li>Crossing the river is a significant tactical decision, as it leaves the piece vulnerable after crossing.</li>
                                <li>Control of river-crossing points can be a key strategic advantage.</li>
                            </ul>
                        </li>
                    </ul>

                    <h3>Deployment Phase</h3>
                    <ul>
                        <li>Players are assigned 2 random piece types</li>
                        <li>Kings are placed in the middle of the last column</li>
                        <li>Players take turns placing pieces on their side of the river</li>
                        <li>Each player ends with 3/6 pieces plus a king</li>
                    </ul>

                    <h3>Battle Phase</h3>
                    <ul>
                        <li>Players take turns moving one piece up to 3 spaces</li>
                        <li>Pieces can't enter the river or friendly-occupied spaces</li>
                        <li>After the tiger and squirrel have used their skills, the round ends. You can attack or move before using your skills.</li>
                        <li>Crossing the river ends the turn</li>
                        <li>Collisions result in damage based on weight difference</li>
                        <li>Game ends when a king is defeated or all Spices are defeated</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRulesModal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
private bool useAIPlacement = false; // Flag for AI piece placement
    private string selectedAnimalType; // Currently selected piece type for placement
    private List<Point> validMoves = new List<Point>(); // List of valid moves for the selected piece
    private bool showRulesModal = false; // Flag to show or hide the rules modal

    // Get CSS class for a cell based on its state
    private string GetCellClass(Zone zone)
    {
        if (Game.CurrentPhase == Game.GamePhase.SquirrelAbility &&
            zone.occupant is Animal animal &&
            animal.Owner == Game.CurrentPlayer &&
            !Game.squirrelTargets.Contains(animal))
        {
            return "squirrel-target"; // Highlight valid squirrel targets
        }
        return "";
    }

    // Confirm the squirrel's special ability
    private void ConfirmSquirrelAbility()
    {
        if (Game.squirrelTargets.Count == 2)
        {
            Game.ExecuteSquirrelAbility();
            Game.EndTurn();
            StateHasChanged();
        }
    }

    // Get CSS class for an animal based on its state
    private string GetAnimalClass(Occupant occupant)
    {
        if (occupant is Animal animal && Game.squirrelTargets.Contains(animal))
        {
            return "selected-target"; // Highlight selected targets
        }
        return "";
    }

    // Open the game rules modal
    private void OpenRulesModal()
    {
        showRulesModal = true;
    }

    // Close the game rules modal
    private void CloseRulesModal()
    {
        showRulesModal = false;
    }

    // Initialize the game setup
    protected override void OnInitialized()
    {
        Game.SetUpGame();
        Game.GameStateChanged += UpdateUI;
    }

    // Set the board size and start the game
    private void SetBoardSize(int size)
    {
        Game.SetBoardSize(size);
        Game.StartGame();
        StateHasChanged();
    }

    // Check if a cell is selected
    private bool IsSelected(Zone zone)
    {
        return Game.IsAnimalSelected(zone.location);
    }

    // Check if a move is valid
    private bool IsValidMove(Zone zone, Point point)
    {
        var selectedAnimal = Game.GetSelectedAnimal();
        if (selectedAnimal == null)
            return false;

        // Check if the current point is in the valid moves list
        return validMoves.Any(m => m.x == point.x && m.y == point.y);
    }

    // Select a piece type for placement
    private void SelectAnimalType(string animalType)
    {
        selectedAnimalType = animalType;
        Console.WriteLine($"Selected piece type: {animalType}");
    }

    // AI places animals on the board
    private void AIPlaceAnimals()
    {
        Game.AIPlaceAnimals(Game.CurrentPlayer);
        if (IsPlacementComplete())
        {
            Game.CurrentPhase = Game.GamePhase.Playing;
        }
        else
        {
            Game.SwitchCurrentPlayer();
        }
        StateHasChanged();
    }

    // Place a selected animal on the board
    private void PlaceSelectedAnimal(Point location)
    {
        Console.WriteLine($"Attempting to place {selectedAnimalType} at ({location.x}, {location.y})");
        if (selectedAnimalType != null)
        {
            if (Game.PlaceAnimal(Game.CurrentPlayer, selectedAnimalType, location))
            {
                Console.WriteLine($"Successfully placed {selectedAnimalType} at ({location.x}, {location.y})");
                selectedAnimalType = null;
                if (IsPlacementComplete())
                {
                    Game.CurrentPhase = Game.GamePhase.Playing;
                    Console.WriteLine("Placement phase complete, entering playing phase");
                }
                else
                {
                    Game.SwitchCurrentPlayer();
                    Console.WriteLine($"Switched to player {Game.CurrentPlayer.Id}");
                }
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Unable to place {selectedAnimalType} at ({location.x}, {location.y})");
            }
        }
        else
        {
            Console.WriteLine("Please select a piece type to place first");
        }
    }

    // Check if the placement phase is complete
    private bool IsPlacementComplete()
    {
        int requiredPieces = Game.numCellsX <= 5 ? 3 : 6;
        return Game.Player1.Pieces.Count(p => !(p is CatKing) && !(p is MouseKing)) == requiredPieces &&
               Game.Player2.Pieces.Count(p => !(p is CatKing) && !(p is MouseKing)) == requiredPieces;
    }

    // Use a piece's special ability
    private void UseSpecialAbility()
    {
        var animal = Game.GetSelectedAnimal();
        if (animal != null)
        {
            Game.UseSpecialAbility(animal);
            StateHasChanged();
        }
    }

    // Check if a piece can use its special ability
    private bool CanUseSpecialAbility(Animal animal)
    {
        return animal != null && !animal.HasUsedSpecialAbility && animal.CanMoveAndAttackThisTurn;
    }

    // Handle clicks on the game board
    private void HandleZoneClick(Zone zone)
    {
        if (Game.CurrentPhase == Game.GamePhase.Placement)
        {
            PlaceSelectedAnimal(zone.location);
        }
        else if (Game.CurrentPhase == Game.GamePhase.SquirrelAbility)
        {
            Game.AddSquirrelTarget(zone.occupant as Animal);
            StateHasChanged();
        }
        else
        {
            Game.ZoneClick(zone);
        }
        StateHasChanged();
    }

    // Check if a placement location is valid
    private bool IsValidPlacementLocation(Point location)
    {
        if (Game.CurrentPhase != Game.GamePhase.Placement || selectedAnimalType == null)
        {
            return false;
        }
        return Game.IsValidPlacement(Game.CurrentPlayer, location);
    }

    // Update the UI based on game state changes
    private void UpdateUI()
    {
        var selectedAnimal = Game.GetSelectedAnimal();
        if (selectedAnimal != null)
        {
            validMoves = Game.GetValidMoves(selectedAnimal);
            Game.DebugPrintValidMoves(selectedAnimal); // Debugging
        }
        else
        {
            validMoves.Clear();
        }
        InvokeAsync(StateHasChanged);
    }

    // Restart the game
    private void RestartGame()
    {
        Game.ResetGame();
        Game.SetUpGame();
    }

    // Dispose of the game state change event handler
    public void Dispose()
    {
        Game.GameStateChanged -= UpdateUI;
    }
}